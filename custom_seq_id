#CUSTOM SEQ ID WITHOUT GAP (3 PARTS):
1.TABLE STRUCTURE
2.TRIGGER FUNCTION
3.TRIGGER

#HOW IT WORKS:
IF SOMETHING WENT WRONG WITH ID SERIAL SEQ AND THAT MEANS GAP INSIDE ID SERIAL
THEN GET THE SECOND LAST INSERTED ROW (SECOND LAST INSERTED BECAUSE LAST IS 
THE CURRENT INSERTED ROW) AND UPDATE LAST INSERTED ROW WITH SECOND LAST INSERTED + 1

----------------

#Table
CREATE TABLE table_name(
id SERIAL UNIQUE PRIMARY KEY NOT NULL, 
name text,
dt timestamp default now());

----------------

#Trigger function
CREATE FUNCTION custom_seq_id() RETURNS trigger
AS $$

  #get id from current insert
  current_inserted_id = TD["new"]["id"]
  
  if current_inserted_id == 1:
    #if first inserted row in table return None(exit from function)
    return None
  
  try:
    with plpy.subtransaction():
    
      #GET THE SECOND LAST INSERTED ROW (SECOND LAST INSERTED ROW BECAUSE LAST IS THE CURRENT INSERTED ROW, SO LIMIT 2)
      last_inserted_id = plpy.execute("select id from table_name order by dt desc limit 2") 
      
      if current_inserted_id - last_inserted_id[1]["id"] == 1:
        #exit if last inserted row  - second last inserted row = 1(nornal seq) 
        return None
      else:
        #UPDATE LAST INSERTED ROW WITH SECOND LAST INSERTED + 1
        plpy.execute(f"update table_name set id = {last_inserted_id[1]['id'] + 1} where id = {current_inserted_id}")
    
  #write to a file if errors ocurrs        
  except plpy.SPIError as err:
    with open('/path/to/error_file','w') as f:
      f.write(f'{err}')
  
$$ LANGUAGE plpython3u;

----------------

#trigger
CREATE TRIGGER custom_seq_id_trigger
AFTER INSERT
ON table_name
FOR EACH ROW
EXECUTE PROCEDURE custom_seq_id(); 

